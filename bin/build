#!/bin/bash

# exit on error, unset vars
set -eu
# exit early for errors in pipelines
set -o pipefail

usage() {
    cat << EOF
usage: $0 [options] major_version minor_version patch_version

OPTIONS:
    -n        docker build with --no-cache.
    -d        Diff files using supplied utility e.g. diff.
    -t        Run tests.
    -v        Verbose output, prints every command to stdout.
    -h        Prints this help message.
EOF
}

# Options
cache=
diff=
run_tests=
while getopts ":nd:tvh" opt; do
    case $opt in
        n)
            cache=--no-cache
            ;;
        d)
            diff=$OPTARG
            ;;
        t)
            run_tests=yes
            ;;
        v)
            set -x
            ;;
        h)
            usage
            exit
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

# Positional arguments
shift "$((OPTIND-1))"
if [ "$#" -ne 3 ]; then
    echo "Illegal number of parameters"
    usage
    exit 1
fi
version_major=$1
version_minor=$2
version_patch=$3

v_minor=$version_major.$version_minor
v_full=$version_major.$version_minor.$version_patch
echo
echo Building "$v_full"
echo

# set -o xtrace

## Dockerfile

write_version() {
    sed -i '' -E "s/^FROM nginx:([0-9\.]+)$/FROM nginx:${v_full}/" "$1"
}
write_version Dockerfile

## Build

# pre-build config
curl -L "https://raw.githubusercontent.com/nginx/nginx/branches/stable-${v_minor}/conf/nginx.conf" > \
    conf/nginx.conf-default
curl https://raw.githubusercontent.com/nginxinc/nginx-wiki/master/source/start/topics/recipes/drupal.rst | \
    pandoc -f rst -t json | \
    jq -r '.blocks | map(select(.t == "CodeBlock"))[0].c | last' > \
    conf/drupal.conf-default

# build image
docker build $cache -f Dockerfile -t "drupal-web:nginx-${v_full}" .

# tests
if [[ ! -z "$run_tests" ]]; then

    network=docker-drupal-web
    set +e
    docker network create -d bridge "$network" > /dev/null
    set -e
    php=$(docker run --rm -d --network "$network" --name php -v /var/www/html tbfisher/drupal-php:7.1-dev)
    docker logs "$php"
    nginx=$(docker run --rm -d -P --expose 80 --network "$network" --volumes-from "$php" -v /var/www/html -v /etc/nginx "drupal-web:nginx-${v_full}")
    docker logs "$nginx"

    # https://github.com/yandex/gixy
    test_gixy=$(docker run --rm --volumes-from "$nginx" yandex/gixy -f json /etc/nginx/nginx.conf)

    # curl phpinfo
    docker exec "$nginx" /bin/sh -c 'apt-get -qq update; apt-get -yqq install curl; echo "<?php phpinfo();" > /var/www/html/index.php' > /dev/null
    test_phpinfo=$(docker exec "$nginx" /bin/sh -c 'curl -sSIL http://localhost | grep "HTTP/1.1 200 OK"' | sed -e 's/[[:space:]]*$//')

    # clean up
    set +e
    docker rm -f "$nginx" > /dev/null
    docker rm -f "$php" > /dev/null
    docker network rm "$network" > /dev/null
    set -e

    # test output
    if [ "$(echo "$test_gixy" | jq 'length')" != 0 ]; then
        echo gixy test failed.
        echo "$test_gixy" | jq
        exit 1
    fi
    if [ "$test_phpinfo" != 'HTTP/1.1 200 OK' ]; then
        echo curl phpinfo failed.
        exit 1
    fi

    echo tests pass.
fi

set +e

# examine config
if [[ -n "$diff" ]]; then
    $diff conf/nginx.conf-default       conf/nginx.conf-development            &
    $diff conf/drupal.conf-default      conf/drupal.conf-development           &
fi
